import sqlite3
import random
import time
import httpx
from datetime import datetime

# Configuration de la base de donn√©es
DB_PATH = "logement.db"

# Configuration de l'API m√©t√©o
API_KEY = "19a0ca2291c83708d91e302ee4d74235"
BASE_URL = "https://api.openweathermap.org/data/2.5/weather"
CITY = "Paris"

# Fonction pour r√©cup√©rer la temp√©rature ext√©rieure
def get_outdoor_temperature():
    try:
        response = httpx.get(BASE_URL, params={"q": CITY, "appid": API_KEY, "units": "metric"})
        response.raise_for_status()
        data = response.json()
        return data["main"]["temp"]  # Temp√©rature ext√©rieure
    except httpx.RequestError as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de la m√©t√©o : {e}")
        return None

# Fonction pour ins√©rer des mesures simul√©es dans la base de donn√©es
def insert_sensor_data(sensor_id, value):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("""
                INSERT INTO mesure (capteur_actionneur_id, valeur, date_insertion)
                VALUES (?, ?, ?)
            """, (sensor_id, value, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            conn.commit()
    except sqlite3.Error as e:
        print(f"‚ùå Erreur SQL lors de l'insertion des mesures : {e}")

# Fonction pour ins√©rer une action dans la base de donn√©es
def insert_action(sensor_id, action_type):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("""
                INSERT INTO action (capteur_id, type_action, date_insertion)
                VALUES (?, ?, ?)
            """, (sensor_id, action_type, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            conn.commit()
    except sqlite3.Error as e:
        print(f"‚ùå Erreur SQL lors de l'insertion de l'action : {e}")

# Fonction pour g√©rer les actions en fonction des mesures
def handle_actions(sensor, value):
    if sensor["type"] == "temp√©rature":
        if value > 25:  # Seuil arbitraire de 25¬∞C
            action_type = "Allumer LED"
            print(f"‚ö†Ô∏è Temp√©rature √©lev√©e d√©tect√©e par le capteur {sensor['id']} : {value}¬∞C. Action : {action_type}.")
            insert_action(sensor["id"], action_type)
        else:
            action_type = "√âteindre LED"
            print(f"‚úÖ Temp√©rature normale d√©tect√©e par le capteur {sensor['id']} : {value}¬∞C. Action : {action_type}.")
            insert_action(sensor["id"], action_type)
    elif sensor["type"] == "humidit√©" and value < 30:  # Seuil pour l'humidit√©
        action_type = "Envoyer alerte : Humidit√© basse"
        print(f"‚ö†Ô∏è Humidit√© basse d√©tect√©e par le capteur {sensor['id']} : {value}%. Action : {action_type}.")
        insert_action(sensor["id"], action_type)
    else:
        print(f"‚ÑπÔ∏è Aucune action n√©cessaire pour le capteur {sensor['id']} ({sensor['type']}).")

# Fonction pour simuler les capteurs
def simulate_sensors():
    while True:
        # R√©cup√©rer la temp√©rature ext√©rieure
        outdoor_temp = get_outdoor_temperature()
        if outdoor_temp is None:
            print("üîÑ R√©essai dans 10 secondes...")
            time.sleep(10)
            continue

        print(f"üå°Ô∏è Temp√©rature ext√©rieure : {outdoor_temp}¬∞C")

        # Simuler des capteurs
        sensors = [
            {"id": 1, "type": "temp√©rature", "variation": 2},  # Simule un capteur de temp√©rature
            {"id": 2, "type": "humidit√©", "variation": 5},    # Simule un capteur d'humidit√©
            {"id": 3, "type": "luminosit√©", "variation": 20}, # Simule un capteur de luminosit√©
        ]

        for sensor in sensors:
            if sensor["type"] == "temp√©rature":
                # Simule une temp√©rature proche de la temp√©rature ext√©rieure
                simulated_value = round(outdoor_temp + random.uniform(-sensor["variation"], sensor["variation"]), 2)
            else:
                # G√©n√®re une valeur al√©atoire pour les autres capteurs
                simulated_value = round(random.uniform(20, 100), 2)
            
            print(f"üìü Capteur {sensor['id']} ({sensor['type']}) -> Valeur simul√©e : {simulated_value}")
            insert_sensor_data(sensor["id"], simulated_value)
            handle_actions(sensor, simulated_value)

        # Pause entre chaque simulation
        time.sleep(5)  # Simule une mise √† jour toutes les 5 secondes

if __name__ == "__main__":
    simulate_sensors()
